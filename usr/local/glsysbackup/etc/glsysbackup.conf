#!/usr/bin/env bash

#===================================================================================================
#
#  Author:				Christian Zettel (ccztux)
#						2017-02-04
#						http://linuxinside.at
#
#  Copyright:			Copyright Â© 2017 Christian Zettel (ccztux), all rights reserved
#
#  Project website:		https://github.com/ccztux/glsysbackup
#
#  Last Modification:	Christian Zettel (ccztux)
#						2019-12-13
#
#  Version				2.0.0-rc1
#
#  Description:			Generic Linux System Backup is an advanced backup tool written in bash.
#
#  License:				GNU GPLv3
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#===================================================================================================

# shell check disable=SC2034
# shell check disable=SC2154


#----------------------------------------------------
# In case of direct execution, write output and exit:
#----------------------------------------------------

if [ "${BASH_SOURCE[0]}" == "${0}" ]
then
	printf "\\n%s is a bash config file. Dont execute it directly!\\n\\n" "${0##*/}"
	exit 1
fi



#---------
# Logging:
#---------

# enable log to file
# (valid values: 1|0)
log_to_file="1"

# enable log to stdout
# (valid values: 1|0)
log_to_stdout="1"

# enable log to system logfile
# (valid values: 1|0)
log_to_syslog="0"

# enable log to system journal
# (valid values: 1|0)
log_to_journal="0"

# timestamp format for log messages
# (HINT: have a look at: 'man strftime')
log_timestamp_format="%Y-%m-%d %H:%M:%S"

# truncate logfile at each backup cycle
# (valid values: 1|0)
log_to_file_truncate="0"



#------------
# Privileges:
#------------

# enable this to check if glsysbackup is running with root privileges
# (valid values: 1|0)
root_privileges_required="1"



#--------
# Renice:
#--------

# enable reniceing of glsysbackup and child procs
# (valid values: 1|0)
re_nice_enabled="0"

# set renice priority
# (valid values: -20...19)
# (HINT: have a look at: 'man renice')
re_nice_priority="19"



#-----------
# Re-ionice:
#-----------

# enable re-ioniceing of glsysbackup and child procs
# (valid values: 1|0)
re_ionice_enabled="0"

# set re-ionice scheduling class
# (valid values: 0|1|2|3)
# (HINT: have a look at: 'man ionice')
re_ionice_scheduling_class="2"

# set re-ionice priority
# (valid values: 0...7)
# (HINT: have a look at: 'man ionice')
re_ionice_priority="7"



#----------
# Rotation:
#----------

# keep max 1 backup a day
backup_rotation_one_backup_per_day_only="1"

# enable daily backup rotation
# (valid values: 1|0)
backup_rotation_daily_enabled="1"

# number of backup files to keep of daily backups
backup_rotation_daily_max_backups="10"

# enable weekly backup rotation
# (valid values: 1|0)
backup_rotation_weekly_enabled="1"

# rotation weekday for weekly rotation (1 is monday)
# (valid values: 1|2|3|4|5|6|7)
backup_rotation_weekly_weekday="1"

# number of backup files to keep of weekly backups
backup_rotation_weekly_max_backups="8"

# enable monthly backup rotation
# (valid values: 1|0)
backup_rotation_monthly_enabled="1"

# rotation day of month for monthly rotation (1 is monday)
# (valid values: 1|2|3|...|last day of month)
backup_rotation_monthly_day_of_month="1"

# number of backup files to keep of monthly backups
backup_rotation_monthly_max_backups="6"



#--------------------
# Installed packages:
#--------------------

# enable the creation of installed packages file
# (valid values: 1|0)
installed_packages_enabled="1"

# force this package manager to create installed packages file, if you have more than one package
# manager installed
# (valid values: rpm|dpkg|pacman|equery|pkgutil|cygcheck)
installed_packages_forced_manager=""

# path where installed packages file should be created
installed_packages_directory="/tmp"



#--------
# Backup:
#--------

# if this value is less equal than the tar rc, the backup job will be interpreted
# as 'backup successful'
# (valid values: 0|1|2)
# (HINT: have a look at: 'man tar' section: 'RETURN VALUE')
backup_successful_tar_rc="1"

# enable backup compression
# (valid values: 1|0)
backup_compression_enabled="1"

# backup compression type
# (valid values: gzip|bzip2|xz|lzip|lzma|lzop)
backup_compression_type="gzip"

# enable backup verbose mode
backup_verbose_mode_enabled="1"

# show backup totals
# (valid values: 1|0)
backup_show_totals="1"

# individual tar options
# (HINT: have a look at: 'man tar')
backup_individual_options=(
""
)

# set backup destination path
backup_destination_path="/var/backups"

# set backup filename
backup_base_filename="${script_config_name}"

# files and folders you want to backup
backup_items=(
"/etc/"
"/home/"
"/root/"
"/var/lib/mpd/"
"/usr/local/bin/"
"/boot/config.txt"
)

# exclude this items from backup
# (HINT: have a look at: 'man tar')
backup_exlude_items=(
""
)



#------------
# Encryption:
#------------

# enable backup encryption with openssl
# (valid values: 1|0)
backup_encryption_enabled="0"

# set password for encryption
backup_encryption_password="change_me"



#---------------------
# Pre backup commands:
#---------------------

# enable pre backup commands functionality
# (valid values: 1|0)
pre_backup_commands_enabled="0"

# define your pre backup commands
pre_backup_commands=(
"${script_base_path}/libexec/create_automysqlbackup"
"df -ahHT ${backup_base_path}"
)

# exit glsysbackup in case execution of pre backup commands was not successful
# (valid values: 1|0)
pre_backup_exit_when_unsuccessful="1"

# exit glsysbckup at the very first pre backup command, which was not successful
# (valid values: 1|0)
pre_backup_paranoia_mode="0"



#----------------------
# Post backup commands:
#----------------------

# enable post backup commands functionality
# (valid values: 1|0)
post_backup_commands_enabled="0"

# define your post backup commands
post_backup_commands=(
"df -ahHT ${backup_base_path}"
"${script_base_path}/libexec/scp_to_remote_host"
)

# exit glsysbackup in case execution of post backup commands was not successful
# (valid values: 1|0)
post_backup_exit_when_unsuccessful="1"

# exit glsysbckup at the very first post backup command, which was not successful
# (valid values: 1|0)
post_backup_paranoia_mode="0"



#-----------------------
# Notification commands:
#-----------------------

# enable notification commands functionality
# (valid values: 1|0)
notification_commands_enabled="0"

# define your notification commands
notification_commands=(
"/usr/local/bin/sendEmail.pl -f from@mydomain.com -t to@mydomain.com -u \"${script_name} (${script_version}) - Backup job: ${script_config_name} ready\" -m body"
)

# notify all backup cycles or only unsuccessful ones
# (valid values: 1|0)
notification_notify_all_backup_jobs="0"
